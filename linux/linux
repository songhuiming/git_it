### 1: linux: how Shell locates the file  ###
to run the scr in your own dir, like /home/hsong/first.scr, need to run it at /home/hsong/   like /bin/sh /home/hsong/first.scr
to overcome this inputing path, you need to create your own bin like:
$cd                     (go to the home dir)
$mkdir bin              (create bin dir, install your own shell script so that script can be run as independent program)
$cp first ~/bin         (copy your script first to the bin dir)
$first                  (run it)


###  2: vi: how to search in vi with case insensitive  ###
in vi, run this   :set ignorecase(or :set ic)  , that's it
turn it on so no need to bother typing the :set each time, using  echo set ignorecase >>.exrc in your home directory, the .exrc is read each time when you start vi.
More .exrc is a startup file (or configuration) file for the vi editor 


###  3: vi: search and replace
The :substitute command searches for a text pattern, and replaces it with a text string. There are many options, but these are what you probably want:

:s/foo/bar/g
Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'.

:%s/foo/bar/g
Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.

:%s/foo/bar/gc
Change each 'foo' to 'bar', but ask for confirmation first.

:%s/\<foo\>/bar/gc
Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.

:%s/foo/bar/gci
Change each 'foo' (case insensitive) to 'bar'; ask for confirmation.
This may be wanted after using :set noignorecase to make searches case sensitive (the default).

:%s/foo/bar/gcI
Change each 'foo' (case sensitive) to 'bar'; ask for confirmation.
This may be wanted after using :set ignorecase to make searches case insensitive.

The g flag means global ÎíÎñ each occurrence in the line is changed, rather than just the first. This tip assumes the default setting for the 'gdefault' and 'edcompatible' option (off), which requires that the g flag be included in%s///g to perform a global substitute. Using :set gdefault creates confusion because then %s/// is global, whereas %s///g is not (that is, g reverses its meaning).
If you use the c flag, you need to confirm for each match what to do. Vim will output something like:replace with foobar (y/n/a/q/l/^E/^Y)? (where foobar is the replacement part of the :s/.../.../command. You can type y which means to substitute this match, n to skip this match, a to substitute this and all remaining matches ("all" remaining matches), q to quit the command, l to substitute this match and quit (think of "last"), ^E to scroll the screen up by holding the Ctrl key and pressing E and ^Y to scroll the screen down by holding the Ctrl key and pressing Y. However, the last two choices are only available, if your Vim is a normal, big or huge built or the insert_expand feature was enabled at compile time (look for +insert_expand in the output of:version).


###  4: find function in linux
# find all your files with your own username, sort by size and list last 10
ls -lR /data | grep hsong | awk '{ print $5" "$9 }' | sort -n | tail -10 | sort -rn
# find the file with name contains sas_ucr and execute to delete them, for user_name hsong as the input variable
find /home/hsong/ /home/temp_usr/ -maxdepth 1 -name "*sas_ucr*" -user "$1" -print -exec /bin/rm -Rf {} \;
# find dir /home/hsong and its subdir files like .txt and cp them to dir_txt/
find /home/hsong -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents
# search file and rsync to another serser sas_server2, same dir
find /data/sasdata/format/formats.sas7bdat -exec rsync -avzu {} sas_server2:{} \;


###  5: use date expression
fst_day_this_mon=$(date -d "$date" +01%b%Y)
lst_day_last_mon=$(date -d "-1 day $fst_day_this_mon" +%d%b%Y)
## other ways to do it:
USER_DATE=$date
# first day of the month
FIRST_DAY_OF_MONTH=$(date -d "$USER_DATE" +%b-01-%Y)
PREVIOUS_DAY=$(date -d "$USER_DATE -1 days" +%b-%d-%Y)
# last day of the month
FIRST_DAY_NEXT_MONTH=$(date -d "$USER_DATE +1 month" +%b-01-%Y)
LAST_DAY_OF_MONTH=$(date -d "$FIRST_DAY_NEXT_MONTH -1 day" +%b-%d-%Y)
FIRST_DAY_LAST_MONTH=$(date -d "$USER_DATE -1 month" +%d%b%Y)
# another one
d1=$(date -d "today-8days" +"%d%b%Y")
d2=$(date -d "today-8days" +"%d%b%Y")
d3=$(date -d "today-3days" +"%d%b%Y")
d4=$(date -d "today-3days" +"%d%b%Y")
echo "$d1" "$d2" "$d3" "$d4"


###  6: cron job and script file
# set up cron job with parater
58 16 * * WED /home/hsong/jobs/test.scr 
# script file is like
source /home/sasprod/.bash_profile

if [ "$1" = "us" ]
   then
    	cp /home/hsong/test.sas /home/hsong/jobs/test.us.sas
elif [ "$1" = "intl" ]
   then
        cp /home/hsong/test.sas /home/hsong/jobs/test.intl.sas
fi


###  7: linux find large files  http://www.cyberciti.biz/faq/find-large-files-linux/
# search in /var/log for files over 50MB in RedHat / CentOS / Fedora Linux
find /var/log -type f -size +100000k -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'
# search in current file for Debian / Ubuntu Linux
find . -type f -size +100000k -exec ls -lh {} \; | awk '{ print $8 ": " $5 }'


###  8: linux list all hsong files in /data02/temp/
ls -d -lR /data02/temp/**/* | grep hsong
# or to show more details
ls -d -lR /data02/temp/**/**/**/**/**/** | grep hsong
ls -lR /data02/temp/temp_sasprod/* | grep hsong > list


###  9: all the file size of hsong
du -sch /home/hsong/*
ls -lR /data02/* | grep hsong | awk '{sum = sum + $5} END {print sum}'


###  10: find all my files (with size >= limit) under a given dir
for r in $(find /data01/ -type f -user hsong| grep "^\/data01"); do ls -la $r;done|cut -d " " -f 3,5,10
for r in $(find /data02/temp/temp_sasprod/ -type f -user hsong| grep "^\/data02"); do ls -la $r;done|cut -d " " -f 3,5,10
# list the files fits the condition
for r in $(find /data02/temp/temp_sasprod/ -type f -size +500k -user hsong| grep "^\/data02"); do ls -lSR $r;done | less
# rm the files fits the condition
for r in $(find /data02/temp/temp_sasprod/ -type f -size +40000k -user hsong| grep "^\/data02"); do rm -rf $r;done 


###  11: similar to 10 in another way
find /data01/saswork/ /data02/temp/ -maxdepth 8 -size +30000k -name "*sas7bdat" -user "hsong" -print -exec  /bin/ls -ltr {} \;
find /data01/saswork/ /data02/saswork/ -maxdepth 1 -name "*SAS_*" -user "$1" -print -exec /bin/rm -Rf {} \;


###  12: suspend and resume a job by pid in linux
kill -s SIGSTOP pid1 pid2 
kill -s SIGCONT pid1 pid2


### Putty title changes after login : https://superuser.com/questions/510900/putty-title-changes-after-login
The easier answer to this question is two configuration changes in your Putty preferences for the session(s):
In `Window` -> `Behaviour` set your desired Window title.
In `Terminal` -> `Features` check Disable remote-controlled window title changing.

